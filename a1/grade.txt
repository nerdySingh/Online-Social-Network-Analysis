Grade: 3.00/50.00

23 Deduction(s):

--------------
#1: 1.00 points
Failing test: test_complexity_1: 
        @points=1
        
Traceback (most recent call last):
  File "../assignments-sol/a1/a1_test.py", line 123, in test_complexity_1
    self.assertTrue(y is not None, 'nothing returned')
AssertionError: False is not true : nothing returned

source:
    def test_complexity_1(self):
         """
         @points=1
         """
         x = complexity_of_bfs(1000, 500, 10)
         y = complexity_of_bfs(1000, 500, 50)
         self.assertTrue(y is not None, 'nothing returned')
         self.assertTrue(x == y, 'k has no effect in worst case')
--------------

--------------
#2: 1.00 points
Failing test: test_complexity_2: 
        @points=1
        
Traceback (most recent call last):
  File "../assignments-sol/a1/a1_test.py", line 132, in test_complexity_2
    self.assertTrue(y is not None, 'nothing returned')
AssertionError: False is not true : nothing returned

source:
    def test_complexity_2(self):
         """
         @points=1
         """
         x = complexity_of_bfs(1000, 500, 10)
         y = complexity_of_bfs(1000, 1000, 10)
         self.assertTrue(y is not None, 'nothing returned')
         self.assertTrue(y > x, 'complexity depends on number of edges')
         x = complexity_of_bfs(1000, 500, 10)
         y = complexity_of_bfs(2000, 500, 10)
         self.assertTrue(y > x, 'complexity depends on number of nodes')
--------------

--------------
#3: 2.00 points
Failing test: test_cut: 
        @points=2
        
Traceback (most recent call last):
  File "../assignments-sol/a1/a1_test.py", line 220, in test_cut
    self.assertEqual(1, cut(['A', 'B', 'C'], ['D', 'E', 'F', 'G'], example_graph()))
AssertionError: 1 != None

source:
    def test_cut(self):
         """
         @points=2
         """
         self.assertEqual(1, cut(['A', 'B', 'C'], ['D', 'E', 'F', 'G'], example_graph()))
--------------

--------------
#4: 2.00 points
Failing test: test_path_score_1: 
        @points=2
        
Traceback (most recent call last):
  File "../assignments-sol/a1/a1_test.py", line 245, in test_path_score_1
    self.assertListEqual(res, [(('D', 'F'), 0.5), (('D', 'A'), 0.25), (('D', 'C'), 0.25)])
AssertionError: Lists differ: [(('D', 'A'), 0.125), (('D', 'B'), 0.25), (('D', '[44 chars]-09)] != [(('D', 'F'), 0.5), (('D', 'A'), 0.25), (('D', 'C'), 0.25)]

First differing element 0:
(('D', 'A'), 0.125)
(('D', 'F'), 0.5)

First list contains 1 additional elements.
First extra element 3:
(('D', 'D'), 7.450580596923828e-09)

+ [(('D', 'F'), 0.5), (('D', 'A'), 0.25), (('D', 'C'), 0.25)]
- [(('D', 'A'), 0.125),
-  (('D', 'B'), 0.25),
-  (('D', 'C'), 0.125),
-  (('D', 'D'), 7.450580596923828e-09)]

source:
    def test_path_score_1(self):
         """
         @points=2
         """
         g = example_graph()
         train_graph = g.copy()
         train_graph.remove_edge(*('D', 'F'))
         res = path_score(train_graph, 'D', k=4, beta=.5)
         self.assertListEqual(res, [(('D', 'F'), 0.5), (('D', 'A'), 0.25), (('D', 'C'), 0.25)])
--------------

--------------
#5: 3.00 points
Failing test: test_path_score_2: 
        @points=3
        
Traceback (most recent call last):
  File "../assignments-sol/a1/a1_test.py", line 257, in test_path_score_2
    self.assertListEqual(res, [(('D', 'F'), 0.5), (('D', 'A'), 0.25), (('D', 'C'), 0.25), (('D', 'H'), 0.25)])
AssertionError: Lists differ: [(('D', 'A'), 0.125), (('D', 'B'), 0.25), (('D', '[44 chars]-09)] != [(('D', 'F'), 0.5), (('D', 'A'), 0.25), (('D', 'C'[24 chars].25)]

First differing element 0:
(('D', 'A'), 0.125)
(('D', 'F'), 0.5)

+ [(('D', 'F'), 0.5), (('D', 'A'), 0.25), (('D', 'C'), 0.25), (('D', 'H'), 0.25)]
- [(('D', 'A'), 0.125),
-  (('D', 'B'), 0.25),
-  (('D', 'C'), 0.125),
-  (('D', 'D'), 7.450580596923828e-09)]

source:
    def test_path_score_2(self):
         """
         @points=3
         """
         g = example_graph()
         g.add_edge('A', 'H')
         g.add_edge('C', 'H')
         train_graph = g.copy()
         train_graph.remove_edge(*('D', 'F'))
         res = path_score(train_graph, 'D', k=4, beta=.5)
         self.assertListEqual(res, [(('D', 'F'), 0.5), (('D', 'A'), 0.25), (('D', 'C'), 0.25), (('D', 'H'), 0.25)])
--------------

--------------
#6: 4.00 points
Failing test: test_time: 
        @points=4
        
Traceback (most recent call last):
  File "../assignments-sol/a1/a1_test.py", line 267, in test_time
    clusters = partition_girvan_newman(self.graph, 3)
Exception: end of time

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "../assignments-sol/a1/a1_test.py", line 269, in test_time
    self.assertTrue(False, 'should take less than 30 seconds...')
AssertionError: False is not true : should take less than 30 seconds...

source:
    def test_time(self):
         """
         @points=4
         """
         signal.signal(signal.SIGALRM, handler)
         signal.alarm(30)
         start = time.time()
         try:
             clusters = partition_girvan_newman(self.graph, 3)
         except Exception as exc:
             self.assertTrue(False, 'should take less than 30 seconds...')
 
         signal.alarm(0)
         self.assertTrue(clusters is not None, 'nothing returned')
         self.assertTrue(len(clusters) != 0, 'nothing returned')
         end = time.time()
         runtime = end - start
         self.assertTrue(runtime < 30, 'should take less than 30 seconds...')
--------------

--------------
#7: 2.00 points
Failing test: test_vol: 
        @points=2
        
Traceback (most recent call last):
  File "../assignments-sol/a1/a1_test.py", line 214, in test_vol
    self.assertEqual(4, volume(['A', 'B', 'C'], example_graph()))
AssertionError: 4 != None

source:
    def test_vol(self):
         """
         @points=2
         """
         self.assertEqual(4, volume(['A', 'B', 'C'], example_graph()))
--------------

--------------
#8: 2.00 points
Failing test: test_approx_bet_1: 
        @points=2
        
Traceback (most recent call last):
  File "../assignments-sol/a1/a1_test.py", line 182, in test_approx_bet_1
    res = sorted(approximate_betweenness(example_graph(), 5).items())
TypeError: '<' not supported between instances of 'str' and 'tuple'

source:
    def test_approx_bet_1(self):
         """
         @points=2
         """
         res = sorted(approximate_betweenness(example_graph(), 5).items())
         self.assertListEqual(res, [(('A', 'B'), 5.0), (('A', 'C'), 1.0), (('B', 'C'), 5.0), (('B', 'D'), 12.0), (('D', 'E'), 4.5), (('D', 'F'), 4.0), (('D', 'G'), 4.5), (('E', 'F'), 1.5), (('F', 'G'), 1.5)])
--------------

--------------
#9: 2.00 points
Failing test: test_approx_bet_2: 
        @points=2
        
Traceback (most recent call last):
  File "../assignments-sol/a1/a1_test.py", line 189, in test_approx_bet_2
    res = sorted(approximate_betweenness(example_graph(), 2).items())
TypeError: '<' not supported between instances of 'str' and 'tuple'

source:
    def test_approx_bet_2(self):
         """
         @points=2
         """
         res = sorted(approximate_betweenness(example_graph(), 2).items())
         self.assertListEqual(res, [(('A', 'B'), 2.0), (('A', 'C'), 1.0), (('B', 'C'), 2.0), (('B', 'D'), 6.0), (('D', 'E'), 2.5), (('D', 'F'), 2.0), (('D', 'G'), 2.5), (('E', 'F'), 1.5), (('F', 'G'), 1.5)])
--------------

--------------
#10: 2.00 points
Failing test: test_approx_right: 
        @points=2
        
Traceback (most recent call last):
  File "../assignments-sol/a1/a1_test.py", line 197, in test_approx_right
    self.assertEqual('no', is_approximation_always_right().lower())
AttributeError: 'NoneType' object has no attribute 'lower'

source:
    def test_approx_right(self):
         """
         @points=2
         """
         self.assertEqual('no', is_approximation_always_right().lower())
--------------

--------------
#11: 5.00 points
Failing test: test_bfs_3: 
        @points=5

        
Traceback (most recent call last):
  File "../assignments-sol/a1/a1_test.py", line 98, in test_bfs_3
    node2distances, node2num_paths, node2parents = bfs(graph, 'A', max_depth=10)
ValueError: too many values to unpack (expected 3)

source:
    def test_bfs_3(self):
         """
         @points=5
 
         """
         graph = example_graph2()
         node2distances, node2num_paths, node2parents = bfs(graph, 'A', max_depth=10)
         self.assertListEqual(sorted(node2distances.items()),
                              [('A', 0), ('B', 2), ('C', 1), ('D', 1), ('E', 3), ('F', 4), ('G', 2)])
         self.assertListEqual(sorted(node2num_paths.items()),
                              [('A', 1), ('B', 1), ('C', 1), ('D', 1), ('E', 3), ('F', 3), ('G', 2)])
         res = sorted((node, sorted(parents)) for node, parents in node2parents.items())
         self.assertListEqual(res,
                              [('B', ['D']), ('C', ['A']), ('D', ['A']), ('E', ['B', 'G']), ('F', ['E']), ('G', ['C', 'D'])])
         b = bottom_up(graph, node2distances, node2num_paths, node2parents)
         self.assertEqual(1.0, round(b[('E', 'F')], 2))
         self.assertEqual(3.83, round(b[('A', 'D')], 2))
         self.assertEqual(1.67, round(b[('B', 'D')], 2))
         self.assertEqual(1.17, round(b[('D', 'G')], 2))
         self.assertEqual(2.17, round(b[('A', 'C')], 2))
         self.assertEqual(0.67, round(b[('B', 'E')], 2))
         self.assertEqual(1.33, round(b[('E', 'G')], 2))
         self.assertEqual(1.17, round(b[('C', 'G')], 2))
--------------

--------------
#12: 2.00 points
Failing test: test_bfs_n2d_1: 
        @points=2
        
Traceback (most recent call last):
  File "../assignments-sol/a1/a1_test.py", line 48, in test_bfs_n2d_1
    node2distances, node2num_paths, node2parents = bfs(example_graph(), 'E', 5)
ValueError: too many values to unpack (expected 3)

source:
    def test_bfs_n2d_1(self):
         """
         @points=2
         """
         node2distances, node2num_paths, node2parents = bfs(example_graph(), 'E', 5)
         res = sorted(node2distances.items())
         self.assertListEqual(res, [('A', 3), ('B', 2), ('C', 3), ('D', 1), ('E', 0), ('F', 1), ('G', 2)])
--------------

--------------
#13: 1.00 points
Failing test: test_bfs_n2d_2: 
        @points=1
        
Traceback (most recent call last):
  File "../assignments-sol/a1/a1_test.py", line 72, in test_bfs_n2d_2
    node2distances, node2num_paths, node2parents = bfs(example_graph(), 'E', 2)
ValueError: too many values to unpack (expected 3)

source:
    def test_bfs_n2d_2(self):
         """
         @points=1
         """
         node2distances, node2num_paths, node2parents = bfs(example_graph(), 'E', 2)
         res = sorted(node2distances.items())
         self.assertListEqual(res, [('B', 2), ('D', 1), ('E', 0), ('F', 1), ('G', 2)])
--------------

--------------
#14: 2.00 points
Failing test: test_bfs_n2np_1: 
        @points=2
        
Traceback (most recent call last):
  File "../assignments-sol/a1/a1_test.py", line 56, in test_bfs_n2np_1
    node2distances, node2num_paths, node2parents = bfs(example_graph(), 'E', 5)
ValueError: too many values to unpack (expected 3)

source:
    def test_bfs_n2np_1(self):
         """
         @points=2
         """
         node2distances, node2num_paths, node2parents = bfs(example_graph(), 'E', 5)
         res = sorted(node2num_paths.items())
         self.assertListEqual(res, [('A', 1), ('B', 1), ('C', 1), ('D', 1), ('E', 1), ('F', 1), ('G', 2)])
--------------

--------------
#15: 1.00 points
Failing test: test_bfs_n2np_2: 
        @points=1
        
Traceback (most recent call last):
  File "../assignments-sol/a1/a1_test.py", line 80, in test_bfs_n2np_2
    node2distances, node2num_paths, node2parents = bfs(example_graph(), 'E', 2)
ValueError: too many values to unpack (expected 3)

source:
    def test_bfs_n2np_2(self):
         """
         @points=1
         """
         node2distances, node2num_paths, node2parents = bfs(example_graph(), 'E', 2)
         res = sorted(node2num_paths.items())
         self.assertListEqual(res, [('B', 1), ('D', 1), ('E', 1), ('F', 1), ('G', 2)])
--------------

--------------
#16: 2.00 points
Failing test: test_bfs_n2p_1: 
        @points=2
        
Traceback (most recent call last):
  File "../assignments-sol/a1/a1_test.py", line 64, in test_bfs_n2p_1
    node2distances, node2num_paths, node2parents = bfs(example_graph(), 'E', 5)
ValueError: too many values to unpack (expected 3)

source:
    def test_bfs_n2p_1(self):
         """
         @points=2
         """
         node2distances, node2num_paths, node2parents = bfs(example_graph(), 'E', 5)
         res = sorted((node, sorted(parents)) for node, parents in node2parents.items())
         self.assertListEqual(res, [('A', ['B']), ('B', ['D']), ('C', ['B']), ('D', ['E']), ('F', ['E']), ('G', ['D', 'F'])])
--------------

--------------
#17: 1.00 points
Failing test: test_bfs_n2p_2: 
        @points=1
        
Traceback (most recent call last):
  File "../assignments-sol/a1/a1_test.py", line 88, in test_bfs_n2p_2
    node2distances, node2num_paths, node2parents = bfs(example_graph(), 'E', 2)
ValueError: too many values to unpack (expected 3)

source:
    def test_bfs_n2p_2(self):
         """
         @points=1
         """
         node2distances, node2num_paths, node2parents = bfs(example_graph(), 'E', 2)
         res = sorted((node, sorted(parents)) for node, parents in node2parents.items())
         self.assertListEqual(res, [('B', ['D']), ('D', ['E']), ('F', ['E']), ('G', ['D', 'F'])])
--------------

--------------
#18: 2.00 points
Failing test: test_bottom_up_1: 
        @points=2
        
Traceback (most recent call last):
  File "../assignments-sol/a1/a1_test.py", line 164, in test_bottom_up_1
    node2distances, node2num_paths, node2parents = bfs(example_graph(), 'E', 5)
ValueError: too many values to unpack (expected 3)

source:
    def test_bottom_up_1(self):
         """
         @points=2
         """
         node2distances, node2num_paths, node2parents = bfs(example_graph(), 'E', 5)
         result = bottom_up('E', node2distances, node2num_paths, node2parents)
         res = sorted(result.items())
         self.assertListEqual(res, [(('A', 'B'), 1.0), (('B', 'C'), 1.0), (('B', 'D'), 3.0), (('D', 'E'), 4.5), (('D', 'G'), 0.5), (('E', 'F'), 1.5), (('F', 'G'), 0.5)])
--------------

--------------
#19: 2.00 points
Failing test: test_bottom_up_2: 
        @points=2
        
Traceback (most recent call last):
  File "../assignments-sol/a1/a1_test.py", line 173, in test_bottom_up_2
    node2distances, node2num_paths, node2parents = bfs(example_graph(), 'E', 2)
ValueError: too many values to unpack (expected 3)

source:
    def test_bottom_up_2(self):
         """
         @points=2
         """
         node2distances, node2num_paths, node2parents = bfs(example_graph(), 'E', 2)
         result = bottom_up('E', node2distances, node2num_paths, node2parents)
         res = sorted(result.items())
         self.assertListEqual(res, [(('B', 'D'), 1.0), (('D', 'E'), 2.5), (('D', 'G'), 0.5), (('E', 'F'), 1.5), (('F', 'G'), 0.5)])
--------------

--------------
#20: 1.00 points
Failing test: test_complexity_3: 
        @points=1
        
Traceback (most recent call last):
  File "../assignments-sol/a1/a1_test.py", line 144, in test_complexity_3
    self.assertTrue(round(y / x, 0) != 9, 'not multiplicative')
TypeError: unsupported operand type(s) for /: 'NoneType' and 'NoneType'

source:
    def test_complexity_3(self):
         """
         @points=1
         """
         x = complexity_of_bfs(2000, 500, 10)
         y = complexity_of_bfs(6000, 1500, 10)
         self.assertTrue(round(y / x, 0) != 9, 'not multiplicative')
--------------

--------------
#21: 1.00 points
Failing test: test_complexity_4: 
        @points=1
        
Traceback (most recent call last):
  File "../assignments-sol/a1/a1_test.py", line 155, in test_complexity_4
    self.assertEqual(round(y - x, 0), 4000, 'additive')
TypeError: unsupported operand type(s) for -: 'NoneType' and 'NoneType'

source:
    def test_complexity_4(self):
         """
         @points=1
         """
         x = complexity_of_bfs(2000, 500, 10)
         y = complexity_of_bfs(6000, 500, 10)
         self.assertEqual(round(y - x, 0), 4000, 'additive')
         x = complexity_of_bfs(2000, 500, 10)
         y = complexity_of_bfs(2000, 1500, 10)
         self.assertEqual(round(y - x, 0), 1000, 'additive')
--------------

--------------
#22: 4.00 points
Failing test: test_gn: 
        @points=4
        
Traceback (most recent call last):
  File "../assignments-sol/a1/a1_test.py", line 203, in test_gn
    components = partition_girvan_newman(example_graph(), 5)
  File "students/nerdySingh/a1/a1.py", line 355, in partition_girvan_newman
    edge_to_remove = find_best_edge(graph_cp,max_depth)
  File "students/nerdySingh/a1/a1.py", line 350, in find_best_edge
    return eb[0][0]
IndexError: list index out of range

source:
    def test_gn(self):
         """
         @points=4
         """
         components = partition_girvan_newman(example_graph(), 5)
         components = sorted(components, key=lambda x: sorted(x.nodes())[0])
         res = sorted(components[0].nodes())
         self.assertListEqual(res, ['A', 'B', 'C'])
         res = sorted(components[1].nodes())
         self.assertListEqual(res, ['D', 'E', 'F', 'G'])
--------------

--------------
#23: 2.00 points
Failing test: test_norm_cut: 
        @points=2
        
Traceback (most recent call last):
  File "../assignments-sol/a1/a1_test.py", line 226, in test_norm_cut
    self.assertEqual(0.417, round(norm_cut(['A', 'B', 'C'], ['D', 'E', 'F', 'G'], example_graph()), 3))
TypeError: type NoneType doesn't define __round__ method

source:
    def test_norm_cut(self):
         """
         @points=2
         """
         self.assertEqual(0.417, round(norm_cut(['A', 'B', 'C'], ['D', 'E', 'F', 'G'], example_graph()), 3))
--------------

